generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String  @unique
  email         String  @unique
  emailVerified Boolean @default(false)
  role          String  @default("user")
  accountStatus String  @default("active")
  passwordHash  String?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions                 Session[]
  emailVerificationRequest EmailVerificationRequest?
  passwordResetTokens      PasswordResetToken[]

  cart Cart[]
}

model Session {
  id        String   @id @map("_id") @db.String
  userId    String   @db.ObjectId
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  code      String
  email     String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  tokenHash String   @id @map("_id")
  userId    String   @unique @db.ObjectId
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Int
  image       String
  category    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
}

model Cart {
  id     String     @id @map("_id") @db.String
  items  CartItem[]
  userId String?    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String @db.String
  productId String @db.ObjectId
  quantity  Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}
